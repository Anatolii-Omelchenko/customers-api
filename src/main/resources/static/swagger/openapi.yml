openapi: 3.0.1
info:
  title: Customer API server
  description: This API provides endpoints for managing customers data.
  version: 1.0.0

  license:
    name: All Rights Reserved
    url: https://github.com/Anatolii-Omelchenko
  contact:
    name: Anatolii Omelchenko
    email: omelchenko20@gmail.com
    url: https://github.com/Anatolii-Omelchenko

servers:
  - url: http://localhost:8080/api
    description: Local development server

tags:
  - name: Customers
    description: Endpoints for managing customers

paths:
  /customers:
    get:
      tags:
        - Customers
      summary: Get all customers
      operationId: getCustomers
      responses:
        "200":
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerInfo'
        "500":
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Customers
      summary: Create a new customer
      operationId: createCustomer
      requestBody:
        description: Data to create a new customer
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreateDTO'
      responses:
        "201":
          description: Customer successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerInfo'
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /customers/{id}:
    get:
      tags:
        - Customers
      summary: Get a customer by ID
      operationId: getCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          description: ID of the customer to retrieve
      responses:
        "200":
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerInfo'
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - Customers
      summary: Update a customer by ID
      operationId: updateCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          description: ID of the customer to update
      requestBody:
        description: Data to update the customer
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdateDTO'
      responses:
        "200":
          description: Customer successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerInfo'
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - Customers
      summary: Delete a customer by ID
      operationId: deleteCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          description: ID of the customer to deactivate
      responses:
        "204":
          description: Customer successfully deactivated
        "304":
          $ref: "#/components/responses/NotModified"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    CustomerInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the customer.
        fullName:
          type: string
          description: The full name of the customer.
        email:
          type: string
          description: The email address of the customer.
        phone:
          type: string
          description: The phone number of the customer.
    CustomerCreateDTO:
      type: object
      required:
        - fullName
        - email
      properties:
        fullName:
          type: string
          minLength: 2
          maxLength: 50
          description: The full name of the customer.
        email:
          type: string
          format: email
          maxLength: 100
          minLength: 2
          description: The email address of the customer.
        phone:
          type: string
          pattern: "^\\+\\d{6,14}$"
          description: The phone number of the customer in international format (e.g., +123456789).
    CustomerUpdateDTO:
      type: object
      required:
        - fullName
      properties:
        fullName:
          type: string
          minLength: 2
          maxLength: 50
          description: The updated full name of the customer.
        phone:
          type: string
          pattern: "^\\+\\d{6,14}$"
          description: The updated phone number of the customer in international format (e.g., +123456789).
    ErrorResponse:
      description: Object containing an error message and timestamp
      type: object
      additionalProperties: false
      properties:
        message:
          description: Error message
          type: string
          minLength: 1
          maxLength: 255
        timestamp:
          description: Timestamp when the error occurred
          type: integer
          format: int64
          minimum: 1

  responses:
    NotModified:
      description: Not modified. The resource remains unchanged.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    BadRequest:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFound:
      description: Not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalServerError:
      description: Internal server error. Please try again later
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"